# -*- coding: utf-8 -*-
"""Gopalakrishnan_LVADUSR153.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pLT3NBdP59ISN-na6psLyg7qlbH2YfIH
"""

#importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""1.a Loading Dataset"""

df = pd.read_csv("/content/Final Dataset - IPL.csv")

df.head()

"""B."""

print(df.ndim)
print()
print(df.shape)

print(df.info())

print(df.describe())

print(df.describe(include="object"))

"""1.b, 2.a DATA CLEANING"""

print(df.isnull().sum())
print()
print(df.isnull().sum().sum())

## There is no missing data

"""2.B"""

df.duplicated().sum()

## There is no duplicate data if there use drop_duplicates()

"""3.Descriptive Statistics

a.
"""

# This has count, mean, minimum, maximum, standard deviation and median as 50%
print(df.describe())

print(df.describe(include="object"))

# mode
print(df['highscore'].mode())
print(df['first_ings_score'].mode())
print(df['first_ings_wkts'].mode())
print(df['second_ings_score'].mode())
print(df['second_ings_wkts'].mode())
print(df['margin'].mode())

# range
print(df['highscore'].min(),"to",df['highscore'].max())
print(df['first_ings_score'].min(),"to",df['first_ings_score'].max())
print(df['first_ings_wkts'].min(),"to",df['first_ings_wkts'].max())
print(df['second_ings_score'].min(),"to",df['second_ings_score'].max())
print(df['second_ings_wkts'].min(),"to",df['second_ings_wkts'].max())
print(df['margin'].min(),"to",df['margin'].max())
print(df['match_id'].min(),"to",df['match_id'].max())

# variance
print(df['highscore'].var())
print(df['first_ings_score'].var())
print(df['first_ings_wkts'].var())
print(df['second_ings_score'].var())
print(df['second_ings_wkts'].var())
print(df['margin'].var())

"""4.a"""

#histogram
sns.histplot(data=df, x='highscore', color='Purple')
plt.title("Distribution of highscore")
plt.legend(['Distribution of highscore'])
plt.grid()
plt.show()

sns.pairplot(df)
plt.show()

#scatter plot
plt.figure(figsize=(12,6))
sns.scatterplot(x='first_ings_score', y='second_ings_score',data=df)
plt.title("Scatterplot between the 1st and 2nd innings score")
plt.legend(["Scatterplot between the 1st and 2nd innings score"])
plt.grid()
plt.show()

# boxplot
plt.figure(figsize=(15,10))
sns.boxplot(y = df["highscore"])
plt.title("Highscore distribution")
plt.grid()
plt.show()

# boxplot bi variate
plt.figure(figsize=(15,10))
sns.boxplot(x='venue', y='highscore', data=df)
plt.title("Highscores in every stadium")
plt.xticks(rotation=45)
plt.legend(["Highscores in every stadium"])
plt.grid()
plt.show()

#Barplot
df.groupby('venue').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.title("Number of matches played in every stadium")
plt.grid()
plt.show()

# piechart
plt.figure(figsize=(15,6))
df["venue"].value_counts().plot.pie(startangle = 90,autopct = '%1.2f%%')
plt.legend(bbox_to_anchor=(1.1, 1.0), loc='upper left')
plt.tight_layout()
plt.show()

"""5. Identifing relationships"""

sns.pairplot(df)
plt.show()

## There is correlation between first innings score and second innings score

sns.pairplot(df, hue="venue")
plt.show()

sns.pairplot(df, hue="toss_decision")
plt.show()

df.corr()

"""6.Outlier detection"""

plt.figure(figsize=(15,10))
sns.boxplot(y = df["highscore"])
plt.title("Highscore distribution")
plt.grid()
plt.show()

plt.figure(figsize=(15,10))
sns.boxplot(y = df["first_ings_score"])
plt.title("first_ings_score")
plt.grid()
plt.show()

plt.figure(figsize=(15,10))
sns.boxplot(y = df["second_ings_score"])
plt.title("second_ings_score")
plt.grid()
plt.show()

"""7.performance trnds"""

df.head()

df1 = df.groupby('match_winner').agg({'venue':'count'})
df1.sort_values(by='venue', ascending=False, inplace=True)
df1

"""8.Player spotlight"""

df2 = df['player_of_the_match'].value_counts().reset_index()
df2.head(15)

from datetime import datetime
df['date'] = pd.to_datetime(df['date'], format='%B %d, %Y')
df['date'] = df['date'].dt.strftime('%d-%m-%Y', inplace=True)

df2 = df['top_scorer'].value_counts().reset_index()
df2.head(15)

df2 = df['best_bowling'].value_counts().reset_index()
df2.head(15)

"""9.Data Discovery"""

'''
From the above we can conclude:
1. Gujarat has won the most number of matches
2. There is a positive correlation between first innings score and second innings score
3. Kuldeep Yadav has been the most number of times as the player of the match, so it is adviced to hire him
4. Jos Buttler has been the most number of times as the top scorer, so it is adviced to hire him
5. Yuzvendra Chahal has been the most number of times as the best bowler, so it is adviced to hire him
6. Most numbr of matches was played in mumbai
7. Based the best players in the man of the match, top scorers, best bowlers we can knowto whom to give priority
and to whom we should not give to
8. based on the average score per stadium if we are going to bat we must try to keep a score above the average
to increase the chances of winning
9. based on the toss decision on whether to bat or bowl we must choose based on the most number of wins depending on the stadium and matches_won

'''